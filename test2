class Contact

  attr_accessor :name
  attr_reader   :addresses, :emails, :phone_numbers
 
  def addresses=(addresses)
    @addresses = addresses.map { |a| Address.new(a)}
  end
  
  def phone_numbers=(phone_number)
    @phone_numbers = phone_number.map { |p| PhoneNumber.new(p)}
  end

  def emails=(emails)
    @emails = emails.map { |e| Email.new(e)}
  end
end

class Person < Contact

  attr_accessor :title

  def first_name
    name.split[0]
  end

  def last_name
    name.split[1]
  end

end

class Company < Contact
end

module Formatter
  def formatted_address
    "#{number} #{street}\n#{city}, #{state} #{zip}"
  end

  def formatted_phone_number
    area_code = number.to_s[0..2]
    local_prefix = number.to_s[3..5]
    local_suffix = number.to_s[6..9]
    "(#{area_code}) #{local_prefix}-#{local_suffix}"
  end
end

class Address
  include Formatter

  attr_reader :number, :street, :city, :state, :zip

  def initialize(options)
    @number = options[:number]
    @street = options[:street]
    @city   = options[:city]
    @state  = options[:state]
    @zip    = options[:zip]
  end

end

class PhoneNumber
  include Formatter

  attr_reader :number

  def initialize(number)

    # Accept a hash with the :number parameter as well as a string
    if number.is_a?(Hash)
      number = number[:number]
    end
    @number = number
  end

end

class Email
  class InvalidAddress < StandardError; end

  def self.valid_address?(address)
    address =~ /\A([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})\z/i
  end

  attr_reader :address

  def initialize(address)

    # Accept a hash with the :address parameter as well as a string
    if address.is_a?(Hash)
      address = address[:address]
    end

    if Email.valid_address?(address)
      @address = address
    else
      raise InvalidAddress, "Email address is invalid"
    end
  end

end

require 'test/unit'
class ContactTest < Test::Unit::TestCase

  def setup
    @contact = Contact.new
  end

  def test_setting_and_getting_address
    @contact.addresses = [{ number: 4, street: "My Street", city: "San Diego", state: "CA", zip: 92130 }]
    assert_equal "My Street", @contact.addresses.first.street
    assert_equal 1, @contact.addresses.size
  end

  def test_setting_and_getting_addresses
    @contact.addresses = [
      { number: 1, street: "My Street", city: "San Diego", state: "CA", zip: 92130 },
      { number: 2, street: "Your Street", city: "Los Angeles", state: "CA", zip: 90210 }
    ]
    assert_equal "My Street", @contact.addresses.first.street
    assert_equal "Your Street", @contact.addresses.last.street
    assert_equal 2, @contact.addresses.size
  end

  def test_setting_and_getting_phone_number
    @contact.phone_numbers = [ 8585551212 ]
    assert_equal 8585551212, @contact.phone_numbers.first.number
    assert_equal 1, @contact.phone_numbers.size
  end

  def test_setting_and_getting_phone_numbers
    @contact.phone_numbers = [ 8585551212, 7605551212 ]
    assert_equal 8585551212, @contact.phone_numbers.first.number
    assert_equal 7605551212, @contact.phone_numbers.last.number
    assert_equal 2, @contact.phone_numbers.size
  end

  def test_setting_and_getting_email
    @contact.emails = [ "bensie@gmail.com" ]
    assert_equal "bensie@gmail.com", @contact.emails.first.address
    assert_equal 1, @contact.emails.size
  end

  def test_setting_and_getting_emails
    @contact.emails = [ "bensie@gmail.com", "james@jk-tech.com" ]
    assert_equal "bensie@gmail.com", @contact.emails.first.address
    assert_equal "james@jk-tech.com", @contact.emails.last.address
    assert_equal 2, @contact.emails.size
  end
end


